import java.util.function.BiConsumer;
import java.util.function.Consumer;

public class LinkedList<T> {

	private class Node<T>
	{
		
		public Node(T value) {
			this.value = value;
		}
		T value;
		Node<T> next;
		public boolean hasNext() {
			return next!=null;
		}
	}
	
	private Node<T> getInstance(T value){
		return new Node<T>(value);
	}
	
	private void iterateTillTheTail(BiConsumer<Node<T>> processConsumer,
			Consumer<Node<T>> postConsumer) {
		Node<T> parent = null;
		Node<T> node = root;
		
		while(node.hasNext()) {
			parent = node;
			node = node.next;
			//if(node.value.equals(object)) break;
		}
		parent.next = node.next;
		node.value = null;
	}
	
	private Node<T> root;
	public void add(T value) {
		if(root == null) {
			root = getInstance(value);
		}else {
			Node<T> node = root;
			while(node.hasNext()) {
				node = node.next;
			}//while end.
			node.next = getInstance(value);
		}
	
	}
	
	public void remove(T object) {
		
		if(root == null) return;
		while(node.hasNext()) {
			parent = node;
			node = node.next;
			if(node.value.equals(object)) break;
		}
		parent.next = node.next;
		node.value = null;
	}
	
	public int size() {
		if(root == null) return 0;
		
	}
}
